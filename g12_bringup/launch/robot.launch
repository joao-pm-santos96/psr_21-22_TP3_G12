<launch>
    <arg name="robot_name" default="robot"/>
    <arg name="robot_color" default="Red"/>
    <arg name="x_pos" default="0"/>
    <arg name="y_pos" default="0"/>
    <arg name="z_pos" default="0"/>

    <group ns="$(arg robot_name)">

        <param name="tf_prefix" value="$(arg robot_name)"></param>

        <param name="robot_description" command="$(find xacro)/xacro $(find g12_description)/urdf/g12.urdf.xacro player_name:=$(arg robot_name) player_color:=$(arg robot_color)"/>

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

        <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
        <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />
        <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
            <remap from="~input" to="camera/depth/points" />
            <rosparam>
            filter_field_name: z
            filter_limit_min: 0.01
            filter_limit_max: 5.0
            filter_limit_negative: False
            leaf_size: 0.025
            </rosparam>
        </node>

        <!-- GMapping -->
        <node pkg="gmapping" type="slam_gmapping" name="gmapping_thing" output="screen">
            <!-- <remap from="scan" to="scan" /> -->
            <param name="map_frame" value="/$(arg robot_name)/map" />
            <param name="odom_frame" value="/$(arg robot_name)/odom" />
            <param name="base_frame" value="/$(arg robot_name)/base_link" />
        </node>

        <include file="$(find g12_bringup)/launch/spawn.launch">
            <arg name="player_name" value="$(arg robot_name)"/>
            <arg name="x_pos" value="$(arg x_pos)"/>
            <arg name="y_pos" value="$(arg y_pos)"/>
            <arg name="z_pos" value="$(arg z_pos)"/>
        </include>
    </group>
</launch>