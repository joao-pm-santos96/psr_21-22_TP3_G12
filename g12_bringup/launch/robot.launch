<launch>
    <arg name="robot_name" default="robot"/>
    <arg name="robot_color" default="Red"/>
    <arg name="x_pos" default="0"/>
    <arg name="y_pos" default="0"/>
    <arg name="z_pos" default="0"/>
    <arg name="run_driver" default="false"/>

    <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
    
    <group ns="$(arg robot_name)">

        <!-- fix TF stuff -->
        <param name="tf_prefix" value="$(arg robot_name)"/>
        <param name="publish_frequency" type="double" value="30.0"/>

        <!-- robot description -->
        <param name="robot_description" command="$(find xacro)/xacro $(find g12_description)/urdf/g12.urdf.xacro player_name:=$(arg robot_name) player_color:=$(arg robot_color)"/>

        <!-- rovot state publisher -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        </node>

        <!-- load joint controller configurations from YAML file to parameter server -->
        <rosparam file="$(find g12_bringup)/config/control.yaml" command="load"/>

        <!-- load joint controllers -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
            output="screen" ns="/$(arg robot_name)" args="kinect_position_controller joint_state_controller"/>
            
        <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
        <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />
        <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
            <remap from="~input" to="camera/depth/points" />
            <remap from="~output" to="voxel_grid/output" />
            <rosparam>
            filter_field_name: z
            filter_limit_min: 0.01
            filter_limit_max: 5.0
            filter_limit_negative: False
            leaf_size: 0.025
            </rosparam>
        </node>

        <!-- Estimate point normals -->
        <node pkg="nodelet" type="nodelet" name="normal_estimation" args="load pcl/NormalEstimation pcl_manager" output="screen">
            <remap from="~input" to="voxel_grid/output" />
            <rosparam>
            # -[ Mandatory parameters
            k_search: 12
            radius_search: 0
            # Set the spatial locator. Possible values are: 0 (ANN), 1 (FLANN), 2 (organized)
            spatial_locator: 0
            </rosparam>
        </node>

        <!-- Segment the floor plane -->
        <node pkg="nodelet" type="nodelet" name="planar_segmentation" args="load pcl/SACSegmentationFromNormals pcl_manager" output="screen">
            <remap from="~input"   to="voxel_grid/output" />
            <remap from="~normals" to="normal_estimation/output" />
            <rosparam>
            # -[ Mandatory parameters

            # model_type:
            # 0: SACMODEL_PLANE
            # 1: SACMODEL_LINE
            # 2: SACMODEL_CIRCLE2D
            # 3: SACMODEL_CIRCLE3D
            # 4: SACMODEL_SPHERE
            # 5: SACMODEL_CYLINDER
            # 6: SACMODEL_CONE
            # 7: SACMODEL_TORUS
            # 8: SACMODEL_PARALLEL_LINE
            # 9: SACMODEL_PERPENDICULAR_PLANE
            # 10: SACMODEL_PARALLEL_LINES
            # 11: SACMODEL_NORMAL_PLANE
            # 12: SACMODEL_NORMAL_SPHERE
            # 13: SACMODEL_REGISTRATION
            # 14: SACMODEL_REGISTRATION_2D
            # 15: SACMODEL_PARALLEL_PLANE
            # 16: SACMODEL_NORMAL_PARALLEL_PLANE
            # 17: SACMODEL_STICK

            model_type: 11
            axis: [0.0,0.0,1.0]
            distance_threshold: 0.155
            max_iterations: 1000
            method_type: 0
            optimize_coefficients: true
            normal_distance_weight: 0.1
            eps_angle: 0.09
            </rosparam>
        </node>

        <node pkg="nodelet" type="nodelet" name="extract_ground" args="load pcl/ExtractIndices pcl_manager" output="screen">
            <remap from="~input"   to="voxel_grid/output" />
            <remap from="~indices" to="planar_segmentation/inliers" />
            <rosparam>
            negative: true
            </rosparam>
        </node>

        <!-- GMapping -->
        <node pkg="gmapping" type="slam_gmapping" name="gmapping" output="screen">
            <param name="map_frame" value="/$(arg robot_name)/map" />
            <param name="odom_frame" value="/$(arg robot_name)/odom" />
            <param name="base_frame" value="/$(arg robot_name)/base_link" />
        </node>

        <!-- move_base -->
        <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">

            <rosparam file="$(find g12_bringup)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
            <rosparam file="$(find g12_bringup)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
            <rosparam file="$(find g12_bringup)/config/local_costmap_params.yaml" command="load" />
            <rosparam file="$(find g12_bringup)/config/global_costmap_params.yaml" command="load" />
            <rosparam file="$(find g12_bringup)/config/move_base_params.yaml" command="load" />
            <rosparam file="$(find g12_bringup)/config/dwa_local_planner_params.yaml" command="load" />

            <param name="base_global_planner" value="carrot_planner/CarrotPlanner" />
            <param name="recovery_behavior_enabled" value="false"/>

            <!-- ns frames -->
            <param name="global_costmap/global_frame" value="$(arg robot_name)/map"/>
            <param name="global_costmap/robot_base_frame" value="$(arg robot_name)/base_footprint"/>
            <param name="global_costmap/scan/sensor_frame" value="$(arg robot_name)/camera_rgb_optical_frame"/>

            <param name="local_costmap/global_frame" value="$(arg robot_name)/map"/>
            <param name="local_costmap/robot_base_frame" value="$(arg robot_name)/base_footprint"/>
            <param name="local_costmap/scan/sensor_frame" value="$(arg robot_name)/camera_rgb_optical_frame"/>

        </node>

        <include file="$(find g12_bringup)/launch/spawn.launch">
            <arg name="player_name" value="$(arg robot_name)"/>
            <arg name="x_pos" value="$(arg x_pos)"/>
            <arg name="y_pos" value="$(arg y_pos)"/>
            <arg name="z_pos" value="$(arg z_pos)"/>
        </include>
    </group>

    <group if="$(arg run_driver)">
        <node pkg="g12_player" type="driver" name="$(arg robot_name)" respawn="true" output="screen"/>
    </group>
    
</launch>